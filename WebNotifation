
<!DOCTYPE html>
<html lang="en">
<head runat="server">
    <meta charset="UTF-8" />
    <title>Firebase Messaging Demo</title>
    <!-- Load Firebase v9 compat libraries (global namespace) -->
    <script src="https://www.gstatic.com/firebasejs/9.22.1/firebase-app-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.22.1/firebase-messaging-compat.js"></script>
</head>
<body>
    <h2>Firebase Messaging Demo</h2>
    <p>Your FCM Token (if permission granted):</p>
    <textarea id="tokenDisplay" rows="3" cols="50" readonly></textarea>

    <form id="form1" runat="server">
        <asp:HiddenField ID="hfToken" runat="server" />
        <div>
            <label for="txtTitle">Notification Title:</label>
            <asp:TextBox ID="txtTitle" runat="server" />
        </div>
        <div>
            <label for="txtBody">Notification Body:</label>
            <asp:TextBox ID="txtBody" runat="server" TextMode="MultiLine" Rows="3" />
        </div>
        <div>
            <asp:Button ID="btnSend" runat="server" Text="Send Notification" OnClick="btnSend_Click" />
            <%--<asp:Button ID="btnSend" runat="server" CssClass="btn btn-primary" Text="Send Notification" OnClientClick="sendNotification(); return false;" />--%>
        </div>
        <div>
            <asp:Label ID="lblStatus" runat="server" ForeColor="Green" />
        </div>
        <div id="title-desc">
        </div>


        <div style="margin: 20px; display: none">
            <h2>FCM Bearer Token</h2>
            <asp:Label ID="lblAccessToken" runat="server"
                Text="Token will appear here."
                Font-Size="Large"
                ForeColor="Blue"></asp:Label>
        </div>
        
        <div class="toast-container position-fixed bottom-0 end-0 p-3"></div>
 </form>
    <script type="text/javascript">
        function sendNotification11() {
            var title = document.getElementById('<%= txtTitle.ClientID %>').value;
          var body = document.getElementById('<%= txtBody.ClientID %>').value;
          var token = document.getElementById('<%= hfToken.ClientID %>').value;

            // Use jQuery AJAX to call the server-side method asynchronously
            $.ajax({
                type: "POST",
                url: "MyNotification.aspx/SendNotification", // Server-side method URL
                data: JSON.stringify({ token: token, title: title, body: body }), // Pass data as JSON string
                contentType: "application/json; charset=utf-8", // Set content type to JSON
                dataType: "json", // Expect JSON response
                success: function (response) {
                    alert("Notification sent successfully! Response: " + response.d);
                },
                error: function (xhr, status, error) {
                    alert("Error: " + error);
                }
            });
        }
    </script>

    <!-- Bootstrap for Better UI -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet" />

    <!-- FontAwesome for Icons (Add this to show the bell and close icons) -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet" />

    <!-- Toastr for Notifications -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css" rel="stylesheet" />

    <!-- jQuery and Toastr JS -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>
    <!-- Toastr Notification Function -->
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js" integrity="sha384-I7E8VVD/ismYTF4hNIPjVp/Zjvgyol6VFvRkX/vR+Vc4jQkC+hVqc2pM8ODewa9r" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.min.js" integrity="sha384-0pUGZvbkm6XF6gxjEnlmuGrJXVbNuzT9qBBavbLwCsOGabYfZo0T0to5eqruptLy" crossorigin="anonymous"></script>

    <script type="text/javascript" lang="javascript">
        document.getElementById("liveToastBtn").onclick = function () {
            var toastElList = [].slice.call(document.querySelectorAll('.toast'))
            var toastList = toastElList.map(function (toastEl) {
                return new bootstrap.Toast(toastEl)
            })
            toastList.forEach(toast => toast.show())
        }
    </script>


    <script>
        // Firebase configuration – replace with your actual configuration
        var firebaseConfig = {
            apiKey: "AIzaSyCREvN_Trwx5bX6FN7ivy1wijBFPfvrU6Q",
            authDomain: "myfirstapp-5606a.firebaseapp.com",
            projectId: "myfirstapp-5606a",
            storageBucket: "myfirstapp-5606a.firebasestorage.app",
            messagingSenderId: "463555326955",
            appId: "1:463555326955:web:77264d0516e7f45c935fae",
            measurementId: "G-KQ5BK2BCBN"
        };

        // Initialize Firebase
        firebase.initializeApp(firebaseConfig);
        console.log("Firebase initialized (compat):", firebase.apps.length > 0);

        // Initialize Messaging
        const messaging = firebase.messaging();
        let swRegistration = null;

        // Register the service worker explicitly
        if ('serviceWorker' in navigator) {
            navigator.serviceWorker.register('/firebase-messaging-sw.js')
                .then((registration) => {
                    console.log('Service Worker registered with scope:', registration.scope);
                    swRegistration = registration;
                    // Now that the service worker is registered, request permission
                    requestNotificationPermission();
                    messaging.useServiceWorker(registration);
                })
                .catch((err) => {
                    console.error('Service Worker registration failed:', err);
                });
        } else {
            console.error('Service workers are not supported in this browser.');
        }

        // Request notification permission from the user
        function requestNotificationPermission() {
            Notification.requestPermission().then(permission => {
                if (permission === "granted") {
                    console.log("Notification permission granted.");
                    getFCMToken();
                } else {
                    console.error("Notification permission not granted.");
                }
            }).catch(error => console.error("Permission error:", error));
        }

        // Retrieve the FCM token, passing the service worker registration in the options
        function getFCMToken() {
            messaging.getToken({
                vapidKey: "BH94cxUqKorIGqV1pYLq5mX2CWPiPjQP9747uuM50TOgXN2eBudzWhgphnVOd3NmRBJkAx9kcEhS6FWG1zftD3k",
                serviceWorkerRegistration: swRegistration
            })
                .then(token => {
                    if (token) {
                        console.log("FCM Token:", token);
                        document.getElementById("tokenDisplay").value = token;
                        // Store token in a hidden field so that server code can use it
                        document.getElementById("hfToken").value = token;
                    } else {
                        console.error("No registration token available.");
                    }
                })
                .catch(error => console.error("Error retrieving FCM token:", error));
        }
 messaging.onMessage(function (payload) {
            console.log("Message received 4:", payload);

            // Extract title and body from the payload
            var title = payload.notification.title;
            var body = payload.notification.body;
            showNotification(title, body);
  });
        function showNotification(title, message) {
            if (swRegistration) {
                swRegistration.showNotification(title, {
                    body: message,
                    icon: 'https://fieldattendance.eaangan.com/Content/Img/oswal_logo.png',
                    vibrate: [200, 100, 200]
                });
            } else {
                console.error("Service Worker not registered yet!");
            }
        }

 ------------------show local notification -------------------------------------
  // ✅ Show Notification Using Service Worker
    function showNotification(title, message) {
        if (swRegistration) {
            swRegistration.showNotification(title, {
                body: message,
                icon: 'https://fieldattendance.eaangan.com/Content/Img/oswal_logo.png',
                vibrate: [200, 100, 200]
            });

            // Trigger speech synthesis after notification
            speakNotification("आपके पास एक सूचना आई है।");
        } else {
            console.error("Service Worker not registered yet!");
        }
    }

    // ✅ Speech Synthesis: Speak the notification message using browser's built-in voices
    function speakNotification(message) {
        const utterance = new SpeechSynthesisUtterance(message);

        // Optional: Set voice properties
        let voices = speechSynthesis.getVoices();
        let selectedVoice = voices.find(voice => voice.name === 'Google IN English FeMale'); // Example voice, change as needed

        if (selectedVoice) {
            utterance.voice = selectedVoice;
        }

        speechSynthesis.speak(utterance);
    }
  </script>
</body>
</html>
////////////////////////////////// this  is CS Code /////////////////////////////////////////////
   protected async void btnSend_Click(object sender, EventArgs e)
        {
            // Retrieve the token from the hidden field
            string token = hfToken.Value;
            string title = txtTitle.Text.Trim();
            string body = txtBody.Text.Trim();

            try
            {
                await SendPushNotification(token, title, body);
                lblStatus.Text = "Notification sent successfully!";
            }
            catch (Exception ex)
            {
                lblStatus.Text = "Error sending notification: " + ex.Message;
            }
        }

        private async Task SendPushNotification(string targetToken, string title, string body)
        {
            // Path to your service account JSON file (place it in your project root)
            string jsonPath = Server.MapPath("~/service-account.json");
            GoogleCredential credential = GoogleCredential.FromFile(jsonPath)
                .CreateScoped("https://www.googleapis.com/auth/firebase.messaging");

            // Get an access token from the credential
            string accessToken = await credential.UnderlyingCredential.GetAccessTokenForRequestAsync();

            // Your Firebase project ID (replace with your actual project ID)
            string projectId = "myfirstapp-5606a";
            string url = $"https://fcm.googleapis.com/v1/projects/{projectId}/messages:send";

            // Create the message payload for FCM HTTP v1 API
            var message = new
            {
                message = new
                {
                    token = targetToken,
                    notification = new
                    {
                        title = title,
                        body = body
                    },
                    data = new
                    {
                        url = "https://pacscomp.com/"
                    }
                }
            };

            string jsonMessage = JsonConvert.SerializeObject(message);
            using (HttpClient client = new HttpClient())
            {
                client.DefaultRequestHeaders.Authorization =
                    new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", accessToken);

                var content = new StringContent(jsonMessage, Encoding.UTF8, "application/json");
                HttpResponseMessage response = await client.PostAsync(url, content);
                string result = await response.Content.ReadAsStringAsync();
                System.Diagnostics.Debug.WriteLine(result);

                if (!response.IsSuccessStatusCode)
                {
                    throw new Exception("FCM send error: " + result);
                }
            }

            await Task.Delay(3000);
        }
  private async Task GetBearerTokenAsync()
        {
            try
            {
                // Resolve the absolute path to the JSON file in the root folder.
                string jsonPath = Server.MapPath("~/service-account.json");
               // lblAccessToken.Text += "Resolved jsonPath: " + jsonPath + "<br/>";

                // Check if the file exists.
                if (!File.Exists(jsonPath))
                {
                  //  lblAccessToken.Text += "Service account file not found at the specified path.<br/>";
                    return;
                }
               // lblAccessToken.Text += "Service account file found.<br/>";

                // Create a GoogleCredential with the required scope for Firebase Messaging.
                GoogleCredential credential = GoogleCredential.FromFile(jsonPath)
                    .CreateScoped("https://www.googleapis.com/auth/firebase.messaging");
               // lblAccessToken.Text += "Credential loaded successfully.<br/>";

                // Retrieve the OAuth 2.0 access token.
                string accessToken = await credential.UnderlyingCredential.GetAccessTokenForRequestAsync();
              //  lblAccessToken.Text += "Bearer Access Token generated:<br/>" + accessToken + "<br/>";
            }
            catch (Exception ex)
            {
                //lblAccessToken.Text += "Error retrieving access token: " + ex.ToString() + "<br/>";
            }
        }
/////////////////////////// firebase-messaging-sw.js file ////////////////////////////////////////////////////////////////////
importScripts("https://www.gstatic.com/firebasejs/9.22.1/firebase-app-compat.js");
importScripts("https://www.gstatic.com/firebasejs/9.22.1/firebase-messaging-compat.js");

var firebaseConfig = {
    apiKey: "AIzaSyCREvN_Trwx5bX6FN7ivy1wijBFPfvrU6Q",
    authDomain: "myfirstapp-5606a.firebaseapp.com",
    projectId: "myfirstapp-5606a",
    storageBucket: "myfirstapp-5606a.firebasestorage.app",
    messagingSenderId: "463555326955",
    appId: "1:463555326955:web:77264d0516e7f45c935fae",
    measurementId: "G-KQ5BK2BCBN"
};

// Initialize Firebase
firebase.initializeApp(firebaseConfig);
const messaging = firebase.messaging();

//add listner for local notification start code
self.addEventListener('push', function (event) {
    const options = {
        body: 'You have a new notification!',
        icon: 'https://fieldattendance.eaangan.com/Content/Img/oswal_logo.png',
        vibrate: [100, 50, 100]
    };
    event.waitUntil(
        self.registration.showNotification('Push Notification', options)
    );
});
// end code
// Handle notification click event
self.addEventListener('notificationclick', function (event) {
    console.log('Notification clicked:', event.notification);

    // Close the notification
    event.notification.close();

    // Get the URL from the notification's data property
    const targetUrl = event.notification.data.url || 'https://pacscomp.com/';  // Default URL if not specified

    // Open the URL in a new browser window/tab
    event.waitUntil(    
        clients.openWindow(targetUrl)
    );
});

// Handle background messages (when the app is not in focus)
messaging.onBackgroundMessage(function (payload) {
    console.log("Received background message:", payload);

    // Define notification title and options
    const notificationTitle = payload.notification.title;
    const notificationOptions = {
        body: payload.notification.body,
        icon: payload.notification.icon,
        data: {
            // You can add custom data like a URL for the notification here
            url: payload.data.url || 'https://pacscomp.com/'  // Pass URL in the notification data
        }
    };

    // Show the notification
    return self.registration.showNotification(notificationTitle, notificationOptions);
});

///////// service-account.json  file dowload by  firebase  ///////////
  "type": "service_account",
  "project_id": "myfirstapp-5606a",
  "private_key_id": "510ff03bd8d0bdee2fbd1566476d6c811a850060",
  "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvwIBADANBgkqhkiG9w0BAQEFAASCBKkwggSlAgEAAoIBAQDRXAjeh9rRoTxy\nYuhvaYYP36pZEClh0nrsiV9trbzKdQ0kPWYM6b5aD/XJa1i9l3qPkO1KTxYJLs4V\ng7JcRAwDCimljKDgQUKsdrYEx1FJDs4QMNVg9M2FZzktO04rcFGKulUqd3768ghc\nMdWKP2RaALHwExYy5ewWWEtzK7+D38+ZJeRyfhywySd0NJAtaBFdIGJFXNBl12lq\nkpx19atvpdvv8Sn8DoXTor/9dQoTQDhW7cTyAz2bwor26iH90Tm/sWoC1T9D3INp\nI5QD+P/fWqpMRARFQJnRYN4U8VuaObwM7Yi2bWcCbedECVJKquKInqwQWq3UYphY\nls/dbqKJAgMBAAECggEALT6t1wO2rTuib9kCwQMl2xvb+Wv1+YNOl/xXMIGNzZYu\nzSBsw8knH1kYJduqXazVKp4oPfkp+rmQBZPE0c5N50FEv1eNM/G+mj18eDtoDHkj\n3Nlk39N/7/7fGzCYI+id4rSCr88L1OlGF8CYVMx+4DmKuuaxEzZfx3N0+NKhTLsH\nTF89wn7CbSIu3jnJZPNYabby9p8CCjHPT0U0iEsUJluDSLNd6L23plCvzJXf2bKf\n5ZPwpBNENzr0qUJMNqncB/vexP6NTiXdK50ipTs4YrrF6jQQ2wpww5EeVmO0iGXP\nRD1IA1/aslxo59iazrpsTvXnYg4cAAVDHWDqaGHUdQKBgQDuKh4nIqG5e2zTwRGH\nlxH24ySiCfQoXnkm77kT1LERx1TimW82Kl/AjAPk2i5GgtzCViQJdKFuPPt0hQ/v\naCfnKwU8xkbDcG6+ksJTOSPK/bok4nptTQAvNLr89Bi319Oj3HMSl70z673XvRdQ\nvgNzlFek39/7touOdtZBkvonDQKBgQDhCbE8JORRv/5XeqQLu4aWYRHQC99J0rEF\nMNibPh7PoWQCRIG7yOevo5IccTLrNcnN2kqUiJFPbUCrt6LMYpI9613GzJqEJVLE\nqV4k35p3I/ff8ADaUc/pl8Gc1Pwj6dUH8ZFRL3f/rfkeicvlkorUQworBOjl0U5R\nN3MQN5uKbQKBgQDO1stLJ7uW0AeKvDGSNXSHm2uUQtrGOI41b5qoC18g1qH1DlZU\nj2aLXc5/8bCg0kQRjyhLAfy1NccYwfs965JEJMuupXCNidbUMbcM+iIIyGTiZcL3\nrBkN5ljDGOdiutF2jR1vN1M9hW5hsDpQiEWNGncnnLr06+u19aVMW+5e/QKBgQDc\nJ7JHp8PiolT+WhHxFHWX2sElauf4ffIGpQHT5pMYB8kiWskc4HChKQIBZ1EsQQP7\nqqo5491c+gJBvDa9g1WU1BV7LqGf1C/EC/n5UvP3yK1wXIlJDK691WRpvQgrTlDG\nI7NJ3ImmDhpgoOhj4NiGzks9SOFcLEdVN00POYemhQKBgQDoEgF2mYAjEPU1qjPg\nm50FPqp2nZ3NfD4y1k7UFEmI0DG4fsUL6f7Ovon9KYXnc63mRB7B2tYM6V9bn7Nb\n5Mr9nxQZCIPFBMQnW8PVB279Gn1QBR7ajvclPbpdNCfrZqzpQ1ssFObHOp+VgFTu\nuhF8O+kO3IonP3QSlx6i0kcfrg==\n-----END PRIVATE KEY-----\n",
  "client_email": "fcm-sender@myfirstapp-5606a.iam.gserviceaccount.com",
  "client_id": "117574420593349794227",
  "auth_uri": "https://accounts.google.com/o/oauth2/auth",
  "token_uri": "https://oauth2.googleapis.com/token",
  "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
  "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/fcm-sender%40myfirstapp-5606a.iam.gserviceaccount.com",
  "universe_domain": "googleapis.com"
}


