Skip to content
Navigation Menu
RaviMishra0001
FirebaseWebNotification-

Type / to search
Code
Issues
Pull requests
Actions
Projects
Wiki
Security
Insights
Settings
FirebaseWebNotification-
/
Name your file...
in
main

Edit

Preview
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
250
251
252
253
254
255
256
257
258
259
260
261
262
263
264
265
266
267
268
269
270
271
272
273
274
275
276
277
278
279
280
281
282
283
284
285
286
287
288
289
290
291
292
293
294
295
296
297
298
299
300
301
302
303
304
305
306
307
308
309
310
311
312
313
314
315
316
317
318
319
320
321
322
323
324
325
326
327
328
329
330
331
332
333
334
335
336
337
338
339
340
341
342
343
344
345
346
347
348
349
350
351
352
353
354
355
356
357
358
359
360
361
362
363
364
365
366
367
368
369
370
371
372
373
374
375
376
377
378
379
380
381
382
383
384
385
386
387
388
389
390
391
392
393
394
395
396
<!DOCTYPE html>
<html lang="en">
<head runat="server">
    <meta charset="UTF-8" />
    <title>Firebase Messaging Demo</title>
    <!-- Load Firebase v9 compat libraries (global namespace) -->
    <script src="https://www.gstatic.com/firebasejs/9.22.1/firebase-app-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.22.1/firebase-messaging-compat.js"></script>
</head>
<body>
    <h2>Firebase Messaging Demo</h2>
    <p>Your FCM Token (if permission granted):</p>
    <textarea id="tokenDisplay" rows="3" cols="50" readonly></textarea>

    <form id="form1" runat="server">
        <asp:HiddenField ID="hfToken" runat="server" />
        <div>
            <label for="txtTitle">Notification Title:</label>
            <asp:TextBox ID="txtTitle" runat="server" />
        </div>
        <div>
            <label for="txtBody">Notification Body:</label>
            <asp:TextBox ID="txtBody" runat="server" TextMode="MultiLine" Rows="3" />
        </div>
        <div>
            <asp:Button ID="btnSend" runat="server" Text="Send Notification" OnClick="btnSend_Click" />
            <%--<asp:Button ID="btnSend" runat="server" CssClass="btn btn-primary" Text="Send Notification" OnClientClick="sendNotification(); return false;" />--%>
        </div>
        <div>
            <asp:Label ID="lblStatus" runat="server" ForeColor="Green" />
        </div>
        <div id="title-desc">
        </div>


        <div style="margin: 20px; display: none">
            <h2>FCM Bearer Token</h2>
            <asp:Label ID="lblAccessToken" runat="server"
                Text="Token will appear here."
                Font-Size="Large"
                ForeColor="Blue"></asp:Label>
        </div>
        
        <div class="toast-container position-fixed bottom-0 end-0 p-3"></div>
 </form>
    <script type="text/javascript">
        function sendNotification11() {
            var title = document.getElementById('<%= txtTitle.ClientID %>').value;
          var body = document.getElementById('<%= txtBody.ClientID %>').value;
          var token = document.getElementById('<%= hfToken.ClientID %>').value;

            // Use jQuery AJAX to call the server-side method asynchronously
            $.ajax({
                type: "POST",
                url: "MyNotification.aspx/SendNotification", // Server-side method URL
                data: JSON.stringify({ token: token, title: title, body: body }), // Pass data as JSON string
                contentType: "application/json; charset=utf-8", // Set content type to JSON
                dataType: "json", // Expect JSON response
                success: function (response) {
                    alert("Notification sent successfully! Response: " + response.d);
                },
                error: function (xhr, status, error) {
                    alert("Error: " + error);
                }
            });
        }
    </script>

    <!-- Bootstrap for Better UI -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet" />

    <!-- FontAwesome for Icons (Add this to show the bell and close icons) -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet" />

    <!-- Toastr for Notifications -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css" rel="stylesheet" />

    <!-- jQuery and Toastr JS -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>
    <!-- Toastr Notification Function -->
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js" integrity="sha384-I7E8VVD/ismYTF4hNIPjVp/Zjvgyol6VFvRkX/vR+Vc4jQkC+hVqc2pM8ODewa9r" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.min.js" integrity="sha384-0pUGZvbkm6XF6gxjEnlmuGrJXVbNuzT9qBBavbLwCsOGabYfZo0T0to5eqruptLy" crossorigin="anonymous"></script>

    <script type="text/javascript" lang="javascript">
        document.getElementById("liveToastBtn").onclick = function () {
            var toastElList = [].slice.call(document.querySelectorAll('.toast'))
            var toastList = toastElList.map(function (toastEl) {
                return new bootstrap.Toast(toastEl)
            })
            toastList.forEach(toast => toast.show())
        }
    </script>


    <script>
        // Firebase configuration – replace with your actual configuration
        var firebaseConfig = {
            apiKey: "AIzaSyCREvN_Trwx5bX6FN7ivy1wijBFPfvrU6Q",
            authDomain: "myfirstapp-5606a.firebaseapp.com",
            projectId: "myfirstapp-5606a",
            storageBucket: "myfirstapp-5606a.firebasestorage.app",
            messagingSenderId: "463555326955",
            appId: "1:463555326955:web:77264d0516e7f45c935fae",
            measurementId: "G-KQ5BK2BCBN"
        };

        // Initialize Firebase
        firebase.initializeApp(firebaseConfig);
        console.log("Firebase initialized (compat):", firebase.apps.length > 0);

        // Initialize Messaging
        const messaging = firebase.messaging();
        let swRegistration = null;

        // Register the service worker explicitly
        if ('serviceWorker' in navigator) {
            navigator.serviceWorker.register('/firebase-messaging-sw.js')
                .then((registration) => {
                    console.log('Service Worker registered with scope:', registration.scope);
                    swRegistration = registration;
                    // Now that the service worker is registered, request permission
                    requestNotificationPermission();
                    messaging.useServiceWorker(registration);
                })
                .catch((err) => {
                    console.error('Service Worker registration failed:', err);
                });
        } else {
            console.error('Service workers are not supported in this browser.');
        }

        // Request notification permission from the user
        function requestNotificationPermission() {
            Notification.requestPermission().then(permission => {
                if (permission === "granted") {
                    console.log("Notification permission granted.");
                    getFCMToken();
                } else {
                    console.error("Notification permission not granted.");
                }
            }).catch(error => console.error("Permission error:", error));
        }

        // Retrieve the FCM token, passing the service worker registration in the options
        function getFCMToken() {
            messaging.getToken({
                vapidKey: "BH94cxUqKorIGqV1pYLq5mX2CWPiPjQP9747uuM50TOgXN2eBudzWhgphnVOd3NmRBJkAx9kcEhS6FWG1zftD3k",
                serviceWorkerRegistration: swRegistration
            })
                .then(token => {
                    if (token) {
                        console.log("FCM Token:", token);
                        document.getElementById("tokenDisplay").value = token;
                        // Store token in a hidden field so that server code can use it
                        document.getElementById("hfToken").value = token;
                    } else {
                        console.error("No registration token available.");
                    }
                })
                .catch(error => console.error("Error retrieving FCM token:", error));
        }
 messaging.onMessage(function (payload) {
            console.log("Message received 4:", payload);

            // Extract title and body from the payload
            var title = payload.notification.title;
            var body = payload.notification.body;
            showNotification(title, body);
  });
        function showNotification(title, message) {
            if (swRegistration) {
                swRegistration.showNotification(title, {
                    body: message,
                    icon: 'https://fieldattendance.eaangan.com/Content/Img/oswal_logo.png',
                    vibrate: [200, 100, 200]
                });
            } else {
                console.error("Service Worker not registered yet!");
            }
        }

 ------------------show local notification -------------------------------------
  // ✅ Show Notification Using Service Worker
    function showNotification(title, message) {
        if (swRegistration) {
            swRegistration.showNotification(title, {
                body: message,
                icon: 'https://fieldattendance.eaangan.com/Content/Img/oswal_logo.png',
                vibrate: [200, 100, 200]
            });

            // Trigger speech synthesis after notification
            speakNotification("आपके पास एक सूचना आई है।");
        } else {
            console.error("Service Worker not registered yet!");
        }
    }

    // ✅ Speech Synthesis: Speak the notification message using browser's built-in voices
    function speakNotification(message) {
        const utterance = new SpeechSynthesisUtterance(message);

        // Optional: Set voice properties
        let voices = speechSynthesis.getVoices();
        let selectedVoice = voices.find(voice => voice.name === 'Google IN English FeMale'); // Example voice, change as needed

        if (selectedVoice) {
            utterance.voice = selectedVoice;
        }

        speechSynthesis.speak(utterance);
    }
  </script>
</body>
</html>
////////////////////////////////// this  is CS Code /////////////////////////////////////////////
   protected async void btnSend_Click(object sender, EventArgs e)
        {
            // Retrieve the token from the hidden field
            string token = hfToken.Value;
            string title = txtTitle.Text.Trim();
            string body = txtBody.Text.Trim();

            try
            {
                await SendPushNotification(token, title, body);
                lblStatus.Text = "Notification sent successfully!";
            }
            catch (Exception ex)
            {
                lblStatus.Text = "Error sending notification: " + ex.Message;
            }
        }

        private async Task SendPushNotification(string targetToken, string title, string body)
        {
            // Path to your service account JSON file (place it in your project root)
            string jsonPath = Server.MapPath("~/service-account.json");
            GoogleCredential credential = GoogleCredential.FromFile(jsonPath)
                .CreateScoped("https://www.googleapis.com/auth/firebase.messaging");

            // Get an access token from the credential
            string accessToken = await credential.UnderlyingCredential.GetAccessTokenForRequestAsync();

            // Your Firebase project ID (replace with your actual project ID)
            string projectId = "myfirstapp-5606a";
            string url = $"https://fcm.googleapis.com/v1/projects/{projectId}/messages:send";

            // Create the message payload for FCM HTTP v1 API
            var message = new
            {
                message = new
                {
                    token = targetToken,
                    notification = new
                    {
                        title = title,
                        body = body
                    },
                    data = new
                    {
                        url = "https://pacscomp.com/"
                    }
                }
            };

            string jsonMessage = JsonConvert.SerializeObject(message);
            using (HttpClient client = new HttpClient())
            {
                client.DefaultRequestHeaders.Authorization =
                    new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", accessToken);

                var content = new StringContent(jsonMessage, Encoding.UTF8, "application/json");
                HttpResponseMessage response = await client.PostAsync(url, content);
                string result = await response.Content.ReadAsStringAsync();
                System.Diagnostics.Debug.WriteLine(result);

                if (!response.IsSuccessStatusCode)
                {
                    throw new Exception("FCM send error: " + result);
                }
            }

            await Task.Delay(3000);
        }
  private async Task GetBearerTokenAsync()
        {
            try
            {
                // Resolve the absolute path to the JSON file in the root folder.
                string jsonPath = Server.MapPath("~/service-account.json");
               // lblAccessToken.Text += "Resolved jsonPath: " + jsonPath + "<br/>";

                // Check if the file exists.
                if (!File.Exists(jsonPath))
                {
                  //  lblAccessToken.Text += "Service account file not found at the specified path.<br/>";
                    return;
                }
               // lblAccessToken.Text += "Service account file found.<br/>";

                // Create a GoogleCredential with the required scope for Firebase Messaging.
                GoogleCredential credential = GoogleCredential.FromFile(jsonPath)
                    .CreateScoped("https://www.googleapis.com/auth/firebase.messaging");
               // lblAccessToken.Text += "Credential loaded successfully.<br/>";

                // Retrieve the OAuth 2.0 access token.
                string accessToken = await credential.UnderlyingCredential.GetAccessTokenForRequestAsync();
              //  lblAccessToken.Text += "Bearer Access Token generated:<br/>" + accessToken + "<br/>";
            }
            catch (Exception ex)
            {
                //lblAccessToken.Text += "Error retrieving access token: " + ex.ToString() + "<br/>";
            }
        }
/////////////////////////// firebase-messaging-sw.js file ////////////////////////////////////////////////////////////////////
importScripts("https://www.gstatic.com/firebasejs/9.22.1/firebase-app-compat.js");
importScripts("https://www.gstatic.com/firebasejs/9.22.1/firebase-messaging-compat.js");

var firebaseConfig = {
    apiKey: "AIzaSyCREvN_Trwx5bX6FN7ivy1wijBFPfvrU6Q",
    authDomain: "myfirstapp-5606a.firebaseapp.com",
    projectId: "myfirstapp-5606a",
    storageBucket: "myfirstapp-5606a.firebasestorage.app",
    messagingSenderId: "463555326955",
    appId: "1:463555326955:web:77264d0516e7f45c935fae",
    measurementId: "G-KQ5BK2BCBN"
};

// Initialize Firebase
firebase.initializeApp(firebaseConfig);
const messaging = firebase.messaging();

//add listner for local notification start code
self.addEventListener('push', function (event) {
    const options = {
        body: 'You have a new notification!',
        icon: 'https://fieldattendance.eaangan.com/Content/Img/oswal_logo.png',
        vibrate: [100, 50, 100]
    };
    event.waitUntil(
        self.registration.showNotification('Push Notification', options)
    );
});
// end code
// Handle notification click event
self.addEventListener('notificationclick', function (event) {
    console.log('Notification clicked:', event.notification);

    // Close the notification
    event.notification.close();

    // Get the URL from the notification's data property
    const targetUrl = event.notification.data.url || 'https://pacscomp.com/';  // Default URL if not specified

    // Open the URL in a new browser window/tab
    event.waitUntil(    
        clients.openWindow(targetUrl)
    );
});

// Handle background messages (when the app is not in focus)
messaging.onBackgroundMessage(function (payload) {
    console.log("Received background message:", payload);

    // Define notification title and options
    const notificationTitle = payload.notification.title;
    const notificationOptions = {
        body: payload.notification.body,
        icon: payload.notification.icon,
        data: {
            // You can add custom data like a URL for the notification here
            url: payload.data.url || 'https://pacscomp.com/'  // Pass URL in the notification data
        }
    };

    // Show the notification
    return self.registration.showNotification(notificationTitle, notificationOptions);
});



